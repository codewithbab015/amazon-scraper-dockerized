version: '3'

includes:
  common:
    taskfile: ./CommonVars.yml
    internal: true

vars:
  DOCKER_USER: mrbaloyin
  VERSION: '{{.VERSION | default "latest"}}'
  IMAGE_NAME: '{{.IMAGE_NAME | default "amazon-scraper-cli"}}'
  TAG: '{{.DOCKER_USER}}/{{.IMAGE_NAME}}:{{.VERSION}}'
  DOCKER_TAG: '{{.DOCKER_TAG}}'

tasks:
  docker-login:
    desc: Log in to Docker Hub
    cmds:
      - docker login

  local-build:
    desc: Build Docker image locally and load into Docker daemon      
    cmds:
      - docker buildx build --load -t {{.DOCKER_TAG}} .

  remote-build:
    desc: Build and push Docker image to Docker Hub
    deps:
      - docker-login
    cmds:
      - docker buildx build --push -t {{.TAG}} .

  local-remote:
    desc: Push a locally built Docker image to Docker Hub
    cmds:
      - docker push {{.TAG}}
    preconditions:
      - sh: |
          if ! docker image inspect {{.TAG}} > /dev/null 2>&1; then
            echo "Docker image {{.TAG}} not found locally. Run 'task local-build' first."
            exit 1
          fi

  compose-run:
    desc: Run the scraper using Docker Compose
    vars:
      COMPOSE_TAG: '{{.COMPOSE_TAG | default "amazon-scraper-cli"}}'
    cmds:
      - docker compose up --remove-orphans --no-start
      - |
        docker compose run --rm {{.COMPOSE_TAG}} \
          --run_group "{{.common.RUN_GROUP}}" \
          --run_name "{{.common.RUN_NAME}}" \
          --run_mode "{{.common.RUN_MODE}}"{{if eq .common.RUN_MODE "extract"}} \
          --max "{{.common.MAX}}"{{end}}

  run-job:
    desc: Run ETL using Docker container
    preconditions:
      - sh: |
          echo "{{.RUN_MODE}}"

          if [ "{{.RUN_MODE}}" = "extract" ]; then
            if [ -z "{{.MAX}}" ]; then
              echo "Error: --max must be set when RUN_MODE is 'extract'"
              exit 1
            fi
          elif [ "{{.RUN_MODE}}" = "load" ]; then
            if [ -z "{{.DESTINATION}}" ]; then
              echo "Error: --destin must be set when RUN_MODE is 'load'"
              exit 1
            fi
          fi
    cmds:
      - |
        docker run --rm -v "${PWD}/data:/app/data" {{.TAG}} \
          --run_group "{{.RUN_GROUP}}" \
          --run_name "{{.RUN_NAME}}" \
          --run_mode "{{.RUN_MODE}}" {{if eq .RUN_MODE "extract"}} \
          --max "{{.MAX}}"{{end}} \
          {{if eq .RUN_MODE "load"}} \
          --destin "{{.DESTINATION}}"{{end}}
  extract:
    desc: Extract or Scrape Data
    vars:
      MAX: '{{.MAX | default ""}}'
    preconditions:
      - sh: |
          if [ -z "{{.MAX}}" ]; then
            echo "Error: --max must be set when RUN_MODE is 'extract'"
            exit 1
          fi
    cmds:
      - echo "üîç Starting data extraction..."
      -  docker run --rm -v "${PWD}/data:/app/data" {{.DOCKER_TAG}} --run_group {{.RUN_GROUP}} --run_name {{.RUN_NAME}} --max {{.MAX}} --run_mode "extract"

  transform:
    desc: Transform Extracted or Scraped Data
    cmds:
      - echo "üîÑ Starting data transformation..."
      - docker run --rm -v "${PWD}/data:/app/data" {{.DOCKER_TAG}} --run_group {{.RUN_GROUP}} --run_name {{.RUN_NAME}} --run_mode "transform"

  load:
    desc: Load Transformed Data into Filesystem or Postgres DB
    vars:
      DESTINATION: '{{.DESTINATION | default ""}}'
    preconditions:
      - sh: |
          if [ -z "{{.DESTINATION}}" ]; then
            echo "Error: --destination must be set when RUN_MODE is 'load'"
            exit 1
          fi
    cmds:
      - echo "üì§ Loading data to destination..."
      - docker run --rm -v "${PWD}/data:/app/data" {{.DOCKER_TAG}} --run_group {{.RUN_GROUP}} --run_name {{.RUN_NAME}} --destination {{.DESTINATION}} --run_mode "load"

  run-jobs:
    desc: Run the Full ETL Pipeline via CLI
    cmds:
      - task: extract
      - task: transform
      - task: load
      - echo "‚úÖ All ETL steps completed successfully."

